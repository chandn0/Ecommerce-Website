{"ast":null,"code":"// This service is based on the `ng2-cookies` package which sadly is not a service and does\n// not use `DOCUMENT` injection and therefore doesn't work well with AoT production builds.\n// Package: https://github.com/BCJTI/ng2-cookies\nimport { Injectable, Inject, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { DOCUMENT, isPlatformBrowser } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\n\nvar CookieService = function () {\n  function CookieService( // The type `Document` may not be used here. Although a fix is on its way,\n  // we will go with `any` for now to support Angular 2.4.x projects.\n  // Issue: https://github.com/angular/angular/issues/12631\n  // Fix: https://github.com/angular/angular/pull/14894\n  document, // Get the `PLATFORM_ID` so we can check if we're in a browser.\n  platformId) {\n    this.document = document;\n    this.platformId = platformId;\n    this.documentIsAccessible = isPlatformBrowser(this.platformId);\n  }\n  /**\n   * @param name Cookie name\n   * @returns {boolean}\n   */\n\n\n  CookieService.prototype.check = function (name) {\n    if (!this.documentIsAccessible) {\n      return false;\n    }\n\n    name = encodeURIComponent(name);\n    var regExp = this.getCookieRegExp(name);\n    var exists = regExp.test(this.document.cookie);\n    return exists;\n  };\n  /**\n   * @param name Cookie name\n   * @returns {any}\n   */\n\n\n  CookieService.prototype.get = function (name) {\n    if (this.documentIsAccessible && this.check(name)) {\n      name = encodeURIComponent(name);\n      var regExp = this.getCookieRegExp(name);\n      var result = regExp.exec(this.document.cookie);\n      return decodeURIComponent(result[1]);\n    } else {\n      return '';\n    }\n  };\n  /**\n   * @returns {}\n   */\n\n\n  CookieService.prototype.getAll = function () {\n    if (!this.documentIsAccessible) {\n      return {};\n    }\n\n    var cookies = {};\n    var document = this.document;\n\n    if (document.cookie && document.cookie !== '') {\n      var split = document.cookie.split(';');\n\n      for (var i = 0; i < split.length; i += 1) {\n        var currentCookie = split[i].split('=');\n        currentCookie[0] = currentCookie[0].replace(/^ /, '');\n        cookies[decodeURIComponent(currentCookie[0])] = decodeURIComponent(currentCookie[1]);\n      }\n    }\n\n    return cookies;\n  };\n  /**\n   * @param name     Cookie name\n   * @param value    Cookie value\n   * @param expires  Number of days until the cookies expires or an actual `Date`\n   * @param path     Cookie path\n   * @param domain   Cookie domain\n   * @param secure   Secure flag\n   * @param sameSite OWASP samesite token `Lax` or `Strict`\n   */\n\n\n  CookieService.prototype.set = function (name, value, expires, path, domain, secure, sameSite) {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    var cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n\n    if (expires) {\n      if (typeof expires === 'number') {\n        var dateExpires = new Date(new Date().getTime() + expires * 1000 * 60 * 60 * 24);\n        cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n      } else {\n        cookieString += 'expires=' + expires.toUTCString() + ';';\n      }\n    }\n\n    if (path) {\n      cookieString += 'path=' + path + ';';\n    }\n\n    if (domain) {\n      cookieString += 'domain=' + domain + ';';\n    }\n\n    if (secure) {\n      cookieString += 'secure;';\n    }\n\n    if (sameSite) {\n      cookieString += 'sameSite=' + sameSite + ';';\n    }\n\n    this.document.cookie = cookieString;\n  };\n  /**\n   * @param name   Cookie name\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   */\n\n\n  CookieService.prototype.delete = function (name, path, domain) {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    this.set(name, '', new Date('Thu, 01 Jan 1970 00:00:01 GMT'), path, domain);\n  };\n  /**\n   * @param path   Cookie path\n   * @param domain Cookie domain\n   */\n\n\n  CookieService.prototype.deleteAll = function (path, domain) {\n    if (!this.documentIsAccessible) {\n      return;\n    }\n\n    var cookies = this.getAll();\n\n    for (var cookieName in cookies) {\n      if (cookies.hasOwnProperty(cookieName)) {\n        this.delete(cookieName, path, domain);\n      }\n    }\n  };\n  /**\n   * @param name Cookie name\n   * @returns {RegExp}\n   */\n\n\n  CookieService.prototype.getCookieRegExp = function (name) {\n    var escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/ig, '\\\\$1');\n    return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n  };\n\n  CookieService.ɵfac = function CookieService_Factory(t) {\n    return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  CookieService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: CookieService,\n    factory: function factory(t) {\n      return CookieService.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return CookieService;\n}();\n\nexport { CookieService };\n/** @nocollapse */\n\nCookieService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: InjectionToken,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n}; //# sourceMappingURL=cookie.service.js.map","map":null,"metadata":{},"sourceType":"module"}