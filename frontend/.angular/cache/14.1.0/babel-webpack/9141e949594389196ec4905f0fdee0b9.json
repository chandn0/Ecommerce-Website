{"ast":null,"code":"import _classCallCheck from \"C:/Users/boina/Desktop/working/ecommerce-eshop/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/boina/Desktop/working/ecommerce-eshop/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { apiUrl } from '../../environments/environment';\nimport { CookieService } from 'ngx-cookie-service';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { UserService } from './user.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"./user.service\";\nexport var CartService = /*#__PURE__*/(function () {\n  var CartService = /*#__PURE__*/function () {\n    function CartService(http, cookieService, userService) {\n      var _this = this;\n\n      _classCallCheck(this, CartService);\n\n      this.http = http;\n      this.cookieService = cookieService;\n      this.userService = userService;\n      this.cartUrl = \"\".concat(apiUrl, \"/cart\");\n      this.wishListUrl = \"\".concat(apiUrl, \"/wishlist\");\n      this.localMap = {};\n      this.itemsSubject = new BehaviorSubject(null);\n      this.items = this.itemsSubject.asObservable();\n      this.totalSubject = new BehaviorSubject(null);\n      this.total = this.totalSubject.asObservable();\n      this.userService.currentUser.subscribe(function (user) {\n        return _this.currentUser = user;\n      });\n    }\n\n    _createClass(CartService, [{\n      key: \"getLocalCart\",\n      value: function getLocalCart() {\n        if (this.cookieService.check('cart')) {\n          this.localMap = JSON.parse(this.cookieService.get('cart'));\n          return Object.values(this.localMap);\n        } else {\n          this.localMap = {};\n          return [];\n        }\n      }\n    }, {\n      key: \"getCart\",\n      value: function getCart() {\n        var _this2 = this;\n\n        var localCart = this.getLocalCart();\n\n        if (this.currentUser) {\n          if (localCart.length > 0) {\n            return this.http.post(this.cartUrl, localCart).pipe(tap(function (_) {\n              _this2.clearLocalCart();\n            }), map(function (cart) {\n              return cart.products;\n            }), catchError(function (_) {\n              return of([]);\n            }));\n          } else {\n            return this.http.get(this.cartUrl).pipe(map(function (cart) {\n              return cart.products;\n            }), catchError(function (_) {\n              return of([]);\n            }));\n          }\n        } else {\n          return of(localCart);\n        }\n      }\n    }, {\n      key: \"addItem\",\n      value: function addItem(productInOrder) {\n        if (!this.currentUser) {\n          if (this.cookieService.check('cart')) {\n            this.localMap = JSON.parse(this.cookieService.get('cart'));\n          }\n\n          if (!this.localMap[productInOrder.productId]) {\n            this.localMap[productInOrder.productId] = productInOrder;\n          } else {\n            this.localMap[productInOrder.productId].count += productInOrder.count;\n          }\n\n          this.cookieService.set('cart', JSON.stringify(this.localMap));\n          return of(true);\n        } else {\n          var url = \"\".concat(this.cartUrl, \"/add\");\n          return this.http.post(url, {\n            'quantity': productInOrder.count,\n            'productId': productInOrder.productId\n          });\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update(productInOrder) {\n        if (this.currentUser) {\n          var url = \"\".concat(this.cartUrl, \"/\").concat(productInOrder.productId);\n          return this.http.put(url, productInOrder.count);\n        }\n      }\n    }, {\n      key: \"remove\",\n      value: function remove(productInOrder) {\n        if (!this.currentUser) {\n          delete this.localMap[productInOrder.productId];\n          return of(null);\n        } else {\n          var url = \"\".concat(this.cartUrl, \"/\").concat(productInOrder.productId);\n          return this.http.delete(url).pipe();\n        }\n      }\n    }, {\n      key: \"checkout\",\n      value: function checkout() {\n        var url = \"\".concat(this.cartUrl, \"/checkout\");\n        return this.http.post(url, null).pipe();\n      }\n    }, {\n      key: \"storeLocalCart\",\n      value: function storeLocalCart() {\n        this.cookieService.set('cart', JSON.stringify(this.localMap));\n      }\n    }, {\n      key: \"clearLocalCart\",\n      value: function clearLocalCart() {\n        console.log('clear local cart');\n        this.cookieService.delete('cart');\n        this.localMap = {};\n      }\n    }, {\n      key: \"addToWishList\",\n      value: function addToWishList(productId) {\n        console.log(\"started service\"); // const localWishlist = this.getLocalWishList(productId);\n\n        console.log(productId);\n        var url = this.wishListUrl + \"/add/\" + productId;\n\n        if (this.currentUser) {\n          console.log(\"if1\");\n\n          if (productId) {\n            console.log(\"if2\");\n            console.log(url);\n            return this.http.post(url, null); // return of(true);\n          } else {// this.http.get<WishList>(this.wishListUrl);\n            //  return of(false);\n          }\n        }\n      }\n    }]);\n\n    return CartService;\n  }();\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.UserService));\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}