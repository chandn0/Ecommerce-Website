{"ast":null,"code":"import _classCallCheck from \"C:/Users/boina/Desktop/Finalproject/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/boina/Desktop/Finalproject/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { apiUrl } from '../../environments/environment';\nimport { BehaviorSubject, of, Subject } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { CookieService } from 'ngx-cookie-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport var UserService = /*#__PURE__*/(function () {\n  var UserService = /*#__PURE__*/function () {\n    function UserService(http, cookieService) {\n      _classCallCheck(this, UserService);\n\n      this.http = http;\n      this.cookieService = cookieService;\n      this.nameTerms = new Subject();\n      this.name$ = this.nameTerms.asObservable();\n      var memo = localStorage.getItem('currentUser');\n      this.currentUserSubject = new BehaviorSubject(JSON.parse(memo));\n      this.currentUser = this.currentUserSubject.asObservable();\n      cookieService.set('currentUser', memo);\n    }\n\n    _createClass(UserService, [{\n      key: \"currentUserValue\",\n      get: function get() {\n        return this.currentUserSubject.value;\n      }\n    }, {\n      key: \"login\",\n      value: function login(loginForm) {\n        var _this = this;\n\n        var url = \"\".concat(apiUrl, \"/login\");\n        return this.http.post(url, loginForm).pipe(tap(function (user) {\n          if (user && user.token) {\n            _this.cookieService.set('currentUser', JSON.stringify(user));\n\n            if (loginForm.remembered) {\n              localStorage.setItem('currentUser', JSON.stringify(user));\n            }\n\n            console.log(user.name);\n\n            _this.nameTerms.next(user.name);\n\n            _this.currentUserSubject.next(user);\n\n            return user;\n          }\n        }), catchError(this.handleError('Login Failed', null)));\n      }\n    }, {\n      key: \"logout\",\n      value: function logout() {\n        this.currentUserSubject.next(null);\n        localStorage.removeItem('currentUser');\n        this.cookieService.delete('currentUser');\n      }\n    }, {\n      key: \"signUp\",\n      value: function signUp(user) {\n        var url = \"\".concat(apiUrl, \"/register\");\n        return this.http.post(url, user);\n      }\n    }, {\n      key: \"update\",\n      value: function update(user) {\n        var url = \"\".concat(apiUrl, \"/profile\");\n        return this.http.put(url, user);\n      }\n    }, {\n      key: \"get\",\n      value: function get(email) {\n        var url = \"\".concat(apiUrl, \"/profile/\").concat(email);\n        return this.http.get(url);\n      }\n    }, {\n      key: \"addAdmin\",\n      value: function addAdmin(email) {\n        var url = \"\".concat(apiUrl, \"/add/admin/\").concat(email);\n        return this.http.patch(url, null);\n      }\n    }, {\n      key: \"removeAdmin\",\n      value: function removeAdmin(email) {\n        var url = \"\".concat(apiUrl, \"/remove/admin/\").concat(email);\n        return this.http.patch(url, null);\n      }\n    }, {\n      key: \"getUsers\",\n      value: function getUsers() {\n        var url = \"\".concat(apiUrl, \"/getusers\");\n        return this.http.get(url).pipe(tap(function (_) {}), map(function (userResponse) {\n          return userResponse.user;\n        }), catchError(function (_) {\n          return of([]);\n        }));\n        ;\n      }\n    }, {\n      key: \"getPage\",\n      value: function getPage() {\n        var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n        return this.http.get(\"\".concat(apiUrl, \"/getusers?page=\").concat(page, \"&size=\").concat(size)).pipe();\n      }\n      /**\r\n       * Handle Http operation that failed.\r\n       * Let the app continue.\r\n       * @param operation - name of the operation that failed\r\n       * @param result - optional value to return as the observable result\r\n       */\n\n    }, {\n      key: \"handleError\",\n      value: function handleError() {\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 ? arguments[1] : undefined;\n        return function (error) {\n          console.log(error); // log to console instead\n          // Let the app keep running by returning an empty result.\n\n          return of(result);\n        };\n      }\n    }]);\n\n    return UserService;\n  }();\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}