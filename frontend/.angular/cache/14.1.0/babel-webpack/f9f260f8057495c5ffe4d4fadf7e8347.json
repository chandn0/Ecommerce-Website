{"ast":null,"code":"import _classCallCheck from \"C:/Users/boina/Desktop/Finalproject/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/boina/Desktop/Finalproject/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { ProductInfo } from '../models/productInfo';\nimport { apiUrl } from '../../environments/environment';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport var ProductService = /*#__PURE__*/(function () {\n  var ProductService = /*#__PURE__*/function () {\n    function ProductService(http) {\n      _classCallCheck(this, ProductService);\n\n      this.http = http;\n      this.productUrl = \"\".concat(apiUrl, \"/product\");\n      this.productUrl1 = \"\".concat(apiUrl, \"/productall\");\n      this.categoryUrl = \"\".concat(apiUrl, \"/category\");\n    }\n\n    _createClass(ProductService, [{\n      key: \"getAllInPage\",\n      value: function getAllInPage(page, size) {\n        var url = \"\".concat(this.productUrl, \"?page=\").concat(page, \"&size=\").concat(size);\n        return this.http.get(url).pipe();\n      }\n    }, {\n      key: \"getAll\",\n      value: function getAll() {\n        var url = \"\".concat(this.productUrl1);\n        return this.http.get(url).pipe(tap(function (_) {}), map(function (cart) {\n          return cart.productList;\n        }), catchError(function (_) {\n          return of([]);\n        }));\n        ;\n      }\n    }, {\n      key: \"getCategoryInPage\",\n      value: function getCategoryInPage(categoryType, page, size) {\n        var url = \"\".concat(this.categoryUrl, \"/\").concat(categoryType, \"?page=\").concat(page, \"&size=\").concat(size);\n        return this.http.get(url).pipe();\n      }\n    }, {\n      key: \"getDetail\",\n      value: function getDetail(id) {\n        var url = \"\".concat(this.productUrl, \"/\").concat(id);\n        return this.http.get(url).pipe(catchError(function (_) {\n          console.log(\"Get Detail Failed\");\n          return of(new ProductInfo());\n        }));\n      }\n    }, {\n      key: \"update\",\n      value: function update(productInfo) {\n        var url = \"\".concat(apiUrl, \"/seller/product/\").concat(productInfo.productId, \"/edit\");\n        return this.http.put(url, productInfo);\n      }\n    }, {\n      key: \"create\",\n      value: function create(productInfo) {\n        var url = \"\".concat(apiUrl, \"/seller/product/new\");\n        return this.http.post(url, productInfo);\n      }\n    }, {\n      key: \"delelte\",\n      value: function delelte(productInfo) {\n        var url = \"\".concat(apiUrl, \"/seller/product/\").concat(productInfo.productId, \"/delete\");\n        return this.http.delete(url);\n      }\n      /**\r\n       * Handle Http operation that failed.\r\n       * Let the app continue.\r\n       * @param operation - name of the operation that failed\r\n       * @param result - optional value to return as the observable result\r\n       */\n\n    }, {\n      key: \"handleError\",\n      value: function handleError() {\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 ? arguments[1] : undefined;\n        return function (error) {\n          console.error(error); // log to console instead\n          // Let the app keep running by returning an empty result.\n\n          return of(result);\n        };\n      }\n    }, {\n      key: \"getHeaders\",\n      value: function getHeaders() {\n        var headers = new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Accept': \"application/json\"\n        });\n        return headers;\n      }\n    }, {\n      key: \"upload\",\n      value: function upload(file) {\n        var UPLOAD_URL = \"http://localhost:8080/api/csv/upload\";\n        var headers = this.getHeaders(); // Create form data\n\n        var formData = new FormData(); // Store form name as \"file\" with file data\n\n        formData.append(\"file\", file, file.name); //headers = {'Accept': 'application/json', 'content-Type':'multipart/form-data'}\n\n        var xhr = new XMLHttpRequest();\n\n        xhr.onreadystatechange = function (e) {\n          if (xhr.status === 200) {\n            console.log('SUCCESS', xhr.responseText);\n          } else {\n            console.warn('request_error');\n          }\n        };\n\n        xhr.open('POST', 'http://localhost:8080/api/csv/upload', true);\n        xhr.send(formData);\n        return xhr; // Make http post request over api\n        // with formData as req\n\n        /**  return this.http.post(\"http://localhost:8080/api/csv/upload\", formData,{\r\n             headers: {\r\n               'Content-Type': 'multipart/form-data'\r\n               //'Content-Type': 'text/csv'\r\n             },\r\n           }) */\n      }\n    }]);\n\n    return ProductService;\n  }();\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}